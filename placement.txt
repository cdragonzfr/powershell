# Define log file location
$LogFile = "C:\Temp\token_placement.log"
"===== Script Started: $(Get-Date) =====" | Out-File -FilePath $LogFile -Append

# Function to log messages
function Log {
    param ($Message)
    "$((Get-Date).ToString()) - $Message" | Tee-Object -FilePath $LogFile -Append
}

# Check PowerShell version (Exit if below 5.0)
if ($PSVersionTable.PSVersion.Major -lt 5) {
    Log "ERROR: PowerShell version is below 5.0 (Detected: $($PSVersionTable.PSVersion)). Exiting script."
    exit 1
}

Log "PowerShell version is $($PSVersionTable.PSVersion). Proceeding with script."

# Find the .zip file in the current directory
$ZipFile = Get-ChildItem -Path . -Filter "*.zip" | Select-Object -First 1

if (-not $ZipFile) {
    Log "ERROR: No .zip file found in the current directory."
    exit 1
}

Log "Found zip file: $($ZipFile.Name)"

# Extract the zip file
$ExtractPath = Join-Path -Path (Get-Location) -ChildPath "ExtractedContents"
if (!(Test-Path $ExtractPath)) {
    New-Item -ItemType Directory -Path $ExtractPath | Out-Null
}

Log "Extracting $($ZipFile.Name) to $ExtractPath..."
Expand-Archive -Path $ZipFile.FullName -DestinationPath $ExtractPath -Force 2>> $LogFile
if ($LASTEXITCODE -ne 0) {
    Log "ERROR: Extraction failed."
    exit 1
}

Log "Extraction successful."

# Identify CSV file in the extracted folder
$CsvFile = Get-ChildItem -Path $ExtractPath -Filter "*.csv" | Select-Object -First 1

if (-not $CsvFile) {
    Log "ERROR: No CSV file found in the extracted contents."
    exit 1
}

Log "Found CSV file: $($CsvFile.Name)"

# Process the CSV file
Import-Csv -Path $CsvFile.FullName | ForEach-Object {
    $TargetPath = $_.target_path -replace "`r", ""
    $TokenName = $_.token_name -replace "`r", ""
    $OwnerUser = $_.owner -replace "`r", ""
    $Permissions = $_.permissions -replace "`r", ""

    Log "Processing token: $TokenName"

    # Check if token exists
    $TokenPath = Join-Path -Path $ExtractPath -ChildPath $TokenName
    if (-not (Test-Path $TokenPath -PathType Leaf)) {
        Log "ERROR: Token $TokenName not found in extracted directory."
        return
    }

    # Move token to the target path
    Log "Moving $TokenName to $TargetPath"
    if (-not (Test-Path $TargetPath -PathType Container)) {
        Log "Creating directory: $TargetPath"
        New-Item -ItemType Directory -Path $TargetPath -Force | Out-Null
    }

    $DestinationFile = Join-Path -Path $TargetPath -ChildPath $TokenName
    Move-Item -Path $TokenPath -Destination $DestinationFile -Force -ErrorAction SilentlyContinue
    if ($LASTEXITCODE -ne 0) {
        Log "ERROR: Failed to move $TokenName to $TargetPath"
        return
    }

    # Set Ownership and ACL Permissions
    Log "Setting owner: $OwnerUser for $TokenName"
    $acl = Get-Acl -Path $DestinationFile
    $owner = New-Object system.security.principal.NTAccount($OwnerUser)
    $everyone = New-Object system.security.principal.NTAccount("Everyone")
    $administrators = New-Object system.security.principal.NTAccount("Administrators")

    $everyonePermission = New-Object system.security.accesscontrol.filesystemaccessrule($everyone, "FullControl", "Allow")
    $adminPermission = New-Object system.security.accesscontrol.filesystemaccessrule($administrators, "FullControl", "Allow")

    $acl.SetAccessRuleProtection($true, $false)
    $acl.SetOwner($owner)
    $acl.AddAccessRule($everyonePermission)
    $acl.AddAccessRule($adminPermission)
    Set-Acl -Path $DestinationFile -AclObject $acl

    # Verify token placement
    if (Test-Path $DestinationFile -PathType Leaf) {
        $currentAcl = Get-Acl -Path $DestinationFile
        $currentOwner = $currentAcl.Owner
        $currentPermissions = ($currentAcl.Access | Where-Object { $_.IdentityReference -eq "Everyone" -or $_.IdentityReference -eq "BUILTIN\Administrators" } | ForEach-Object { "$($_.IdentityReference): $($_.FileSystemRights)"}) -join "; "

        Log "Verification successful: $TokenName is in $TargetPath"
        Log "Current Owner: $currentOwner"
        Log "Current Permissions: $currentPermissions"
    } else {
        Log "ERROR: Verification failed for $TokenName"
    }
}

Log "===== Script Completed: $(Get-Date) ====="
